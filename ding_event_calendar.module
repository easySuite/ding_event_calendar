<?php

/**
 * @file
 * Ding event calendar module.
 */

/**
 * Implements hook_menu().
 */
function ding_event_calendar_menu() {
  $items = array();

  $items['calendar/%/%'] = array(
    'title' => 'Calendar switch',
    'page callback' => 'ding_event_calendar_callback',
    'page arguments' => array(1, 2),
    'access callback' => array('user_access'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['calendar/events/%'] = array(
    'title' => 'Print events',
    'page callback' => 'ding_event_calendar_events_callback',
    'page arguments' => array(2),
    'access callback' => array('user_access'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * AJAX callback for rendering events calendar.
 */
function ding_event_calendar_callback($month, $year, $type = 'ajax') {
  if ($type == 'ajax') {
    $date = $year . '-' . str_pad($month, 2, '0', STR_PAD_LEFT);
    $output = _ding_event_calendar_content();
    $content = _ding_event_calendar_events($date);
    $commands = array();
    $commands[] = ajax_command_remove('#eventList');
    $commands[] = ajax_command_replace('#eventsCalendar', $output);
    $commands[] = ajax_command_replace('#eventList', $content);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = t("Please enable Javascript!");
    return $output;
  }
}

/**
 * AJAX callback for rendering events list.
 */
function ding_event_calendar_events_callback($date, $type = 'ajax') {
  if ($type == 'ajax') {
    $output = _ding_event_calendar_events($date);
    $commands = array();
    $commands[] = ajax_command_changed('#eventList', '');
    $commands[] = ajax_command_replace('#eventList', $output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = t("Please enable Javascript in your browser.");
    return $output;
  }
}

/**
 * Implements hook_block_info().
 */
function ding_event_calendar_block_info() {
  $blocks['ding-event-calendar'] = array(
    'info' => t('Event Calendar'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ding_event_calendar_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ding-event-calendar':
      $block['subject'] = t('Event Calendar');
      $block['content'] = array(
        '#markup' => _ding_event_calendar_content(),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'ding_event_calendar') . '/css/ding_event_calendar.css'),
          'js' => array(drupal_get_path('module', 'ding_event_calendar') . '/js/ding_event_calendar.js'),
        ),
      );
      break;
  }
  return $block;
}

/**
 * Returns event calendar block content.
 */
function _ding_event_calendar_content() {
  $month = (int) (arg(1) ? arg(1) : date('m'));
  $year = (int) (arg(2) ? arg(2) : date('Y'));

  return '<div id="eventsCalendar">' . draw_controls() . draw_calendar($month, $year) . '</div><div id="eventList">' . get_events(date('Y-m-d')) . '</div>';
}

/**
 * Returning events list fro given date.
 */
function _ding_event_calendar_events($date) {
  if ((int) arg(1) && (int) arg(2)) {
    $date = ($date ? $date : date('Y-m'));
  }
  else {
    $date = (arg(2) ? arg(2) : date('Y-m-d'));
  }
  return '<div id="eventList">' . get_events($date) . '</div>';
}

/**
 * Rendering calendar navigation.
 */
function draw_controls() {
  global $language;

  $month = (int) (arg(1) ? arg(1) : date('m'));
  if (!$month) {
    $month = date('m');
  }
  $year = (int) (arg(2) ? arg(2) : date('Y'));

  $rendered_month = format_date(strtotime(date("01-$month-$year")), 'custom', 'F', NULL, $language->language);

  drupal_add_library('system', 'drupal.ajax');
  /* "next month" control */
  $next_month_link = l(
    t('>>>'),
    'calendar/' . ($month != 12 ? $month + 1 : 1) . '/' . ($month != 12 ? $year : $year + 1) . '/nojs',
    array('attributes' => array('class' => 'use-ajax control slick-arrow slick-next'))
  );

  /* "previous month" control */
  $previous_month_link = l(
    t('<<<'),
    'calendar/' . ($month != 1 ? $month - 1 : 12) . '/' . ($month != 1 ? $year : $year - 1) . '/nojs',
    array('attributes' => array('class' => 'use-ajax control slick-arrow slick-prev '))
  );

  /* bringing the controls together */
  $controls = '<div class="navi-heading slick-slider">' . $previous_month_link . '<h2>' . $rendered_month . '</h2>' . $next_month_link . ' </div>';

  return $controls;
}

/**
 * Rendering calendar.
 */
function draw_calendar($month, $year) {
  /* draw table */
  $calendar = '<table cellpadding="0" cellspacing="0" id="calendar">';

  /* table headings */
  $headings = array(
    t('Mon'),
    t('Tue'),
    t('Wed'),
    t('Thu'),
    t('Fri'),
    t('Sat'),
    t('Sun'),
  );
  $calendar .= '<tr class="calendar-row"><td class="calendar-day-head">' . implode('</td><td class="calendar-day-head">', $headings) . '</td></tr>';

  /* days and weeks vars now ... */
  $running_day = date('w', mktime(0, 0, 0, $month, 0, $year));
  $days_in_month = date('t', mktime(0, 0, 0, $month, 1, $year));
  $days_in_this_week = 1;
  $day_counter = 0;

  /* row for week one */
  $calendar .= '<tr class="calendar-row">';

  /* print "blank" days until the first of the current week */
  for ($x = 0; $x < $running_day; $x++) {
    $calendar .= '<td class="calendar-day-np"> </td>';
    $days_in_this_week++;
  }

  /* keep going with days.... */
  for ($list_day = 1; $list_day <= $days_in_month; $list_day++) {
    $form_date = $year . '-' . sprintf("%02s", $month) . '-' . sprintf("%02s", $list_day);

    /* add in the day number */
    $event_day = db_query("select count(*) from {node} n inner join {field_data_field_ding_event_date} ed where n.nid=ed.entity_id and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value, '+00:00', :tz), '%Y-%m-%d') <= :form_date and DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value2, '+00:00', :tz), '%Y-%m-%d') >= :form_date",
      array(
        ':form_date' => $form_date,
        ':tz' => date('P'),
      ))->fetchField();

    if (empty($event_day)) {
      $list_day_printed = $list_day;
    }
    else {
      $list_day_printed = l($list_day, '/calendar/events/' . $form_date, array('attributes' => array('class' => 'use-ajax')));
    }

    $classes = 'calendar-day';

    if ($form_date == date('Y-m-d')) {
      $classes .= ' current-day';
    }

    if (!empty($event_day)) {
      $classes .= ' has-events';
    }

    $calendar .= "<td class='{$classes}'>";

    $calendar .= '<div class="day-number">' . $list_day_printed . '</div>';

    $calendar .= '</td>';
    if ($running_day == 6) {
      $calendar .= '</tr>';
      if (($day_counter + 1) != $days_in_month) {
        $calendar .= '<tr class="calendar-row">';
      }
      $running_day = -1;
      $days_in_this_week = 0;
    }
    $days_in_this_week++;
    $running_day++;
    $day_counter++;
  }

  /* finish the rest of the days in the week */
  if ($days_in_this_week < 8) {
    for ($x = 1; $x <= (8 - $days_in_this_week); $x++) {
      $calendar .= '<td class="calendar-day-np"> </td>';
    }
  }

  /* final row */
  $calendar .= '</tr>';

  /* end the table */
  $calendar .= '</table>';

  /* all done, return result */
  return $calendar;
}

/**
 * Fetching events list from database.
 *
 * @param string $date
 *   Curent calendar date.
 *
 * @throws \Exception
 */
function get_events($date) {
  global $language;

  $limit = variable_get('ding_event_calendar_limit', '');
  $order = variable_get('ding_event_calendar_library_order', array());

  // Loading data from nodequeue in case when variable is empty.
  if (empty($order)) {
    $nodequeue = nodequeue_load_queue_by_name('ding_library_listing');
    $libraries = nodequeue_load_nodes($nodequeue->qid);
    foreach ($libraries as $key => $library) {
      $order[] = $key;
    }
  }

  $rendering_date = format_date(strtotime($date), 'ding_date_only', NULL, NULL, $language->language);

  if (empty($limit)) {
    $result = db_query("
        select n.nid 
        from {node} n 
        inner join {field_data_field_ding_event_date} ed 
        where n.nid=ed.entity_id 
        and 
        DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value, '+00:00', :tz), '%Y-%m-%d') <= :date 
        and 
        DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value2, '+00:00', :tz), '%Y-%m-%d') >= :date 
        order by ed.field_ding_event_date_value asc",
      array(
        ':date' => $date,
        ':tz' => date('P'),
      ))->fetchAll();
  }
  else {
    $result = db_query_range("
        select n.nid 
        from {node} n 
        inner join {field_data_field_ding_event_date} ed 
        where n.nid=ed.entity_id 
        and 
        DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value, '+00:00', :tz), '%Y-%m-%d') <= :date 
        and 
        DATE_FORMAT(CONVERT_TZ(field_ding_event_date_value2, '+00:00', :tz), '%Y-%m-%d') >= :date 
        order by ed.field_ding_event_date_value asc", 0, $limit,
      array(
        ':date' => $date,
        ':tz' => date('P'),
      ))->fetchAll();
  }

  $items = array();
  foreach ($result as $item) {
    $node = node_load($item->nid);
    $items[$node->og_group_ref[LANGUAGE_NONE][0]['target_id']][$node->nid] = $node;
  }

  // Sort libraries in array by library weight in nodequeue.
  $sorted = array_map(function ($v) use ($items) {
    if (!empty($items[$v])) {
      return $items[$v];
    }
  }, $order);

  // Removing empty elements of array.
  $sorted = array_filter($sorted);

  // Extracting node id's in new order.
  $returned_items = array();
  foreach ($sorted as $k => $item) {
    if (!empty($item)) {
      foreach ($item as $nod) {
        $returned_items[] = $nod;
      }
    }
  }

  return theme('ding_events_list', array(
    'items' => $returned_items,
    'date' => $rendering_date,
  ));
}

/**
 * Implements hook_theme().
 */
function ding_event_calendar_theme($existing, $type, $theme, $path) {
  return array(
    'ding_events_list' => array(
      'variables' => array('items' => NULL, 'date' => NULL),
      'path' => $path . '/templates',
      'template' => 'events-list',
    ),
    'ctools_block_content_type_edit_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function ding_event_calendar_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'ctools_block_content_type_edit_form' && $form_state['pane']->subtype == 'ding_event_calendar-ding-event-calendar') {
    // Adding items limit field.
    $limit = variable_get('ding_event_calendar_limit', '');
    $form['limit'] = array(
      '#type' => 'textfield',
      '#title' => t('Limit'),
      '#description' => t('Limit amount of items in event list. If field value is "empty" or "0", all available items will be shown.'),
      '#size' => 10,
      '#weight' => '10',
      '#default_value' => !empty($limit) ? $limit : '',
    );

    // Implementing draggable table functionality in form.
    $nodes = array();
    $ordered_nodes = variable_get('ding_event_calendar_library_order', array());
    if (!empty($ordered_nodes)) {
      foreach ($ordered_nodes as $ordered_node) {
        $nodes[$ordered_node] = node_load($ordered_node);
      }
    }
    else {
      $nodequeue = nodequeue_load_queue_by_name('ding_library_listing');
      $nodes = nodequeue_load_nodes($nodequeue->qid);
    }

    $form['order_libraries_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Order libraries'),
      '#description' => t('Set the priorities for libraries. Outputted event items will be sorted by this values.'),
      '#weight' => 12,
    );

    $form['order_libraries_fieldset']['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'ding_event_calendar') . '/js/ding_event_calendar.admin.js',
      'type' => 'file',
    );

    $form['order_libraries']['#tree'] = TRUE;

    foreach ($nodes as $node) {
      $form['order_libraries'][$node->nid] = array(
        'title' => array(
          '#markup' => check_plain($node->title),
        ),
        'weight' => array(
          '#type' => 'weight',
          '#title' => t('Weight'),
          '#default_value' => '',
          '#delta' => 10,
          '#title_display' => 'invisible',
        ),
      );
    }

    // Custom submit callback.
    $form['#submit'][] = 'ding_event_calendar_settings_form_submit';
  }
}

/**
 * Theming draggable table.
 *
 * @throws \Exception
 */
function theme_ctools_block_content_type_edit_form($variables) {
  $form = $variables['form'];
  $rows = array();

  foreach (element_children($form['order_libraries']) as $id) {
    $form['order_libraries'][$id]['weight']['#attributes']['class'] = array('library-item-weight');

    $rows[] = array(
      'data' => array(
        drupal_render($form['order_libraries'][$id]['title']),
        drupal_render($form['order_libraries'][$id]['weight']),
      ),
      'class' => array('draggable'),
    );
  }

  $header = array(t('Title'), t('Weight'));
  $table_id = 'library-items-table';

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
    'sticky' => FALSE,
  ));

  $output .= drupal_render_children($form);
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'library-item-weight');

  return $output;
}

/**
 * Calendar block settings form submit callback.
 */
function ding_event_calendar_settings_form_submit($form, &$form_state) {
  // Process items limit.
  variable_set('ding_event_calendar_limit', $form_state['values']['limit']);

  // Process order of libraries.
  $order = $form_state['input']['order_libraries'];

  $new_order = array();
  foreach ($order as $nid => $item) {
    $new_order[] = $nid;
  }

  variable_set('ding_event_calendar_library_order', $new_order);
}
